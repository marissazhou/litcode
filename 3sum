// o(n^3)
public class Solution {
    public List<List<Integer>> threeSum(int[] num) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        for (int i=0; i<num.length; i++){
            for (int j=i+1; j<num.length; j++){
                for (int k=j+1; k<num.length; k++){
                    if(num[i]+num[j]+num[k] == 0) {
                        ArrayList<Integer> list = new ArrayList<Integer>();
                        list.add(num[i]);
                        list.add(num[j]);
                        list.add(num[k]);
                        result.add(list);
                    }
                }
            }
        }
        return result;
    }
}
// o(n^2)
public class Solution {
    public List<List<Integer>> threeSum(int[] num) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (num==null || num.length<3) return result;
        
        Arrays.sort(num);
        
        for (int i=0; i<num.length-2; i++){
            if (i!=0 && num[i]==num[i-1]) continue; 
            int j = i+1;
            int k = num.length-1;
            while(j<k){
                int sum = num[i]+num[j]+num[k];
                if (sum==0){
                    ArrayList<Integer> list = new ArrayList<Integer>();
                    list.add(num[i]);
                    list.add(num[j]);
                    list.add(num[k]);
                    result.add(list);
                    j++; 
                    k--;
                    while (j<k && num[j]==num[j-1]) j++;
                    while (j<k && num[k]==num[k+1]) k--;
                } 
                else if (sum<0) j++;
                else k--;
            }
        }
        return result;
    }
}
