public class Solution {
    public String longestPalindrome(String s) {
        /*
        if (s==null || s.length()<2) return s;
        
        int len = s.length();
        boolean[][] p = new boolean[len][len];
        int max=0, start=0, end=0;
        
        for (int i=0; i<len; i++){
            for (int j=0; j<=i; j++){
                P[i][j] = s.charAt(j) == s.charAt(i) && (i-j<2 || P[i-1][j+1]); 
                if (P[i][j] && i-j > max){
                        max = i - j + 1;
                        start = j;
                        end = i;
                    }
                }
            }
            //P[i][i] = true;
        }
        String st = "";
        return st; //s.substring(0);
        */
        int[] p = new int[1000];
        int mx = 0, id = 0;
        for (int i = 0; i<s.length(); i++) {
            p[i] = mx > i ? Math.min(p[2*id-i], mx-i) : 1;
            while (s.charAt(i + p[i]) == s.charAt(i - p[i])) p[i]++;
            if (i + p[i] > mx) {
                mx = i + p[i];
                id = i;
            }
        }
        return s.substring(id-p[id], id+p[id]);
    }
}
