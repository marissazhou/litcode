/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder == null || preorder.length == 0) return null;
        return buildTreeHelper(preorder, inorder, 0, preorder.length-1, 0, preorder.length-1);
    }
    private TreeNode buildTreeHelper(int[] preorder, int[] inorder, int ps, int pe, int is, int ie) {
        if (pe < ps) return null;
        TreeNode par = new TreeNode(preorder[ps]);
        int idx = findIndex(inorder, preorder[ps]);
        par.left = buildTreeHelper(preorder, inorder, ps+1, ps+idx-is, is, idx-1);
        par.right = buildTreeHelper(preorder, inorder, idx-ie+pe+1, pe, idx+1, ie);
        return par;
    }
    private int findIndex(int[] arr, int val){
        for(int i=0; i<arr.length; i++)
            if (arr[i] == val) return i;
        return -1;
    }
}
