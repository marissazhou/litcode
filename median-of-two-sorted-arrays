public class Solution {
    /*
    public double findMedianSortedArrays(int A[], int B[]) {
        if (A==null && B==null) return 0;
        if (A==null || A.length==0) return getMedian(B);
        if (B==null || B.length==0) return getMedian(A);
        return helper(A, B, 0, A.length-1);
    }
    
    private double helper(int A[], int B[], int left, int right){
        if (left>right)  return helper(B, A, 0, B.length-1);//getMedian(B);
        int m = A.length;
        int n = B.length;
        int len = m + n;
        int i = (left+right)/2;
        int j = len/2-i-1;
        
        if (B[j] <= A[i] && (j == n-1 || (j<n-1 && A[i] <= B[j+1]))) {
            if (i==0 || B[j] > A[i-1]) return ((double)A[i]+B[j])/2;
            else  return  ((double)A[i]+A[i-1])/2;
        }
        else if (B[j] < A[i] && j != n-1 && A[i] > B[j+1]){
             return helper(A, B, left, i-1);
        }
        else {
             return helper(A, B, i+1, right);
        }
    }
    
    private double getMedian(int A[]){
        int m = A.length;
        if (m==0) return 0.0;
        if (m%2 == 0){
            return ((double)A[m/2-1]+A[m/2])/2;
        } else {
            return (double)A[m/2];
        }
    }
    */
    public double findMedianSortedArrays(int A[], int B[]) {
        int len = A.length + B.length;
        if (len % 2 == 0) {
            return (findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)) / 2.0 ;
        } else {
            return findKth(A, 0, B, 0, len / 2 + 1);
        }
    }
    
    // find kth number of two sorted array
    public static int findKth(int[] A, int A_start, int[] B, int B_start, int k){		
		if(A_start >= A.length) 
			return B[B_start + k - 1];
		if(B_start >= B.length)
			return A[A_start + k - 1];

		if (k == 1)
			return Math.min(A[A_start], B[B_start]);
		
		int A_key = A_start + k / 2 - 1 < A.length
		            ? A[A_start + k / 2 - 1]
		            : Integer.MAX_VALUE;
		int B_key = B_start + k / 2 - 1 < B.length
		            ? B[B_start + k / 2 - 1]
		            : Integer.MAX_VALUE; 
		
		if (A_key < B_key) {
			return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
		} else {
			return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
		}
	}
}
