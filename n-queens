public class Solution {
    public List<String[]> solveNQueens(int n) {
        List<String[]> result = new ArrayList<String[]>();
        
        //if (n<4) return result;
        ArrayList<Integer> curList = new ArrayList<Integer>();
        solveNQueensHelper(n, result, curList);
        return result;
    }
    private void solveNQueensHelper(int n, List<String[]> result, ArrayList<Integer> curList){
        if (curList.size() == n) {
            result.add(getChessBoard(curList));
        }
        for (int i=0; i<n; i++){
            if (!isValid(n, curList, i)) continue;
            curList.add(i);
            solveNQueensHelper(n, result, curList);
            curList.remove(curList.size()-1);
        }
    }
    private boolean isValid(int n, ArrayList<Integer> curList, int idx){
        int size = curList.size();
        for (int i=0; i<size; i++) {
            if (curList.get(i) == idx) return false;
            //if (Math.abs(i-idx)<2) return false;
            if (i - curList.get(i) == size - idx) return false;
            if (i + curList.get(i) == size + idx) return false;
        }
        return true;
    }
    private String[] getChessBoard(ArrayList<Integer> curList){
        String[] board = new String[curList.size()];
        for (int i=0; i<curList.size(); i++){
            String row = "";
            for (int j=0; j<curList.size(); j++){
                if (curList.get(i) == j) row += "Q";
                else row += ".";
            }
            board[i] = row;
        }
        return board;
    }
}
