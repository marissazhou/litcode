# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param head, a ListNode
    # @return a ListNode
    def sortList(self, head):
        if head is None or head.next is None:
            return head
        p1 = head
        p2 = head
        while p2.next and p2.next.next:
            p1 = p1.next
            p2 = p2.next.next
        h1 = head
        h2 = p1.next
        p1.next = None
        h1 = self.sortList(h1)
        h2 = self.sortList(h2)
        return self.merge(h1, h2)
         
    
    # @param head1, a ListNode
    # @param head2, a ListNode
    # @return a merged ListNode
    def merge(self, head1, head2):
        if head1 is None:
            return head2
        if head2 is None:
            return head1
        dummy = ListNode(0)
        p = dummy
        while head1 and head2:
            if head1.val <= head2.val:
                p.next = head1
                p = p.next
                head1 = head1.next
            else:
                p.next = head2
                p = p.next
                head2 = head2.next
        if head2 is None:
            p.next = head1
        if head1 is None:
            p.next = head2
        return dummy.next
