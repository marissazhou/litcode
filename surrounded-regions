public class Solution {
    private static int rows = 0;
    private static int cols = 0;
    private static Queue<Integer> queue = null;
    
    public void solve(char[][] board) {
        if (board==null || board.length==0 || board[0].length==0) return;
        
        rows = board.length;
        cols = board[0].length;
        
        queue = new LinkedList<Integer>();
        for (int i=0; i<rows; i++){
            checkAjacentToBorder(i,0,board);
            checkAjacentToBorder(i,cols-1,board);
        }
        for (int i=1; i<cols-1; i++){
            checkAjacentToBorder(0, i,board);
            checkAjacentToBorder(rows-1, i,board);
        }
        while(!queue.isEmpty()){
            int point = queue.poll();
            int i = point/cols;
            int j = point%cols;
            if (board[i][j] == 'O') board[i][j] = 'M';
            checkAjacentToBorder(i-1,j,board);
            checkAjacentToBorder(i+1,j,board);
            checkAjacentToBorder(i,j-1,board);
            checkAjacentToBorder(i,j+1,board);
        }
        for (int i=0; i<rows; i++){
            for (int j=0; j<cols; j++){
                if (board[i][j] == 'M') board[i][j] = 'O';
                else if (board[i][j] == 'O') board[i][j] = 'X';
            }
        }
        queue = null;
        rows = 0;
        cols = 0;
    }
    private void checkAjacentToBorder(int i, int j, char[][] board){
        if (i>=0 && i<rows && j>=0 && j<cols && board[i][j] == 'O') 
            queue.offer(i*cols+j);
    }
}
