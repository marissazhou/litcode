/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        return generateTreesHelper(1, n);
    }
    private List<TreeNode> generateTreesHelper(int s, int e){
        List<TreeNode> result = new ArrayList<TreeNode>();
        if (s>e) {
            result.add(null);
            return result;
        }
        for (int i=s; i<=e; i++){
            List<TreeNode> lefts = generateTreesHelper(s, i-1);
            List<TreeNode> rights = generateTreesHelper(i+1, e);
            for (TreeNode left : lefts){
                for (TreeNode right : rights){
                    TreeNode root = new TreeNode(i);
                    root.left = left;
                    root.right = right;
                    result.add(root);
                }
            }
        }
        return result;
    }
}
