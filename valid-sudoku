public class Solution {
    public boolean isValidSudoku(char[][] board) {
        if (board.length == 0 || board == null) return false;
        boolean[] exists = new boolean[9];
        // row
        for (int i=0; i<9; i++) {
            Arrays.fill(exists, false);
            for (int j=0; j<9; j++){
                if (board[i][j] != '.'){
                    int num = board[i][j]-'0';//Integer.parseInt(board[i][j]);
                    //int num = board[i][j].getNumericValue();
                    if(exists[num-1]) return false;
                    exists[num-1] = true;
                }
            }
        }
        // col
        for (int i=0; i<9; i++) {
            Arrays.fill(exists, false);
            for (int j=0; j<9; j++){
                if (board[j][i] != '.'){
                    int num = board[j][i]-'0';
                    //int num = Integer.parseInt(board[j][i]);
                    if(exists[num-1]) return false;
                    exists[num-1] = true;
                }
            }
        }
        // small 9 boxes
        for (int i=0; i<9; i+=3) {
            for (int j=0; j<9; j+=3){
                Arrays.fill(exists, false);
                for (int k=0; k<9; k++){
                    if (board[i+k/3][j+k%3] != '.'){
                        //int num = board[j][i].getNumericValue();
                        int num = board[i+k/3][j+k%3]-'0';
                        if(exists[num-1]) return false;
                        exists[num-1] = true;
                    }
                }
            }
        }
        return true;
    }
}
